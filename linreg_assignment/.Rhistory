census1 = read.csv('census_data_2000')
census1 = read.csv('census_data_2000.csv')
census1 <- read.csv("~/Documents/data_science/census_data_2000.csv")
View(census1)
census2 <- read.csv("~/Documents/data_science/census_demographics.csv")
View(census2)
names(census1)
names(census2)
intersect(names(census1), names(census2))
settdiff(names(census1),names(census2))
setdiff(names(census1),names(census2))
names(census1)[names(census1)=='State']
names(census1)=='State'
?intersect
names(census1)[names(census1)=='State'] <- 'state'
names(census1)
setdiff(names(census1),names(census2))
census1['state']
census1$state
names(census1)
sum(census1$older_pop)
sum(census2$older_pop)
sum(census1$vote_pop)
sum(census2$vote_pop)
?merge
census2$state
head(census1)
head(census2)
toupper(census1$state)
census1$state <- toupper(census1$state)
head(census1$state)
setdiff(census1$state, census2$state)
census <- merge(census1, census2, by='state')
View(census)
View(census)
census1$year <- 2000
head(census1)
census2$year <- 2012
census[1,]
census2 <- census2[,names(census1)]
names(census2)
names(census1)
censusAll <- rbind(census1,census2)
View(censusAll)
View(censusAll)
library(reshape)
install.packages("reshape")
?melt
library(reshape)
library(ggplot2)
?melt
molten <- melt(censusAll, id.vars=c("state","year"))
head(molten)
cast(molten)
hist(census1$vote_pop)
ggplot(data = census1) + aes(x = vote_pop) + geom_histogram()
ggplot(data = census1) + aes(x = vote_pop) + aes(y = older_pop) + geom_point()
+ aes(color = red)
ggplot(data = census1) + aes(color = green)
install.packages('maps')
library(maps)
states <- map_data('state')
census <- census1
census$region <- tolower(census$state)
statecensus <- merge(states, census[, c("region", "per_older")])
ggplot(data=statecensus, aes(x=long, y=lat, group=group, fill=per_older)) + geom_polygon()
theme
?theme
head(iris)
iris
summary(iris)
?iris
x1 <- iris[1,]
x1
x2 <- iris[2,]
x2
?dist
dist(x1,x2,method = "euclidean")
dist(iris, method = "euclidean")
clc
x1 <- x1[, c(1,2,3,4)]
x2 <- x2[, c(1,2,3,4)]
x1
x2
x1 - x2
sqrt(sum((x1-x2)^2))
iris <- iris(,c(1,2,3,4))
data(iris)
iris <- iris(,c(1,2,3,4))
library('class')
knn
N <- nrow(iris)
N
training <- sample(1, .7*N)
train.index <- sample(1:N, train.pct * N)
train.index <- sample(1:N, 0.7 * N)
train.index
train.data <- iris[train.index,]
View(train.data)
test.data <- iris[-train.index]
View(test.data)
test.data
test.data <- iris[-train.index, ]
View(test.data)
train.data$species
clear
data <- iris
train.index <- sample(1:N, 0.7 * N)
train.data <- iris[train.index,]
test.data <- iris[-train.index, ]
knn(train = train.data[,c(1,2,3,4)], test - test.data[,c(1,2,3,4)],cl = train.data$Species, k=3)
knn(train = train.data[,c(1,2,3,4)], test = test.data[,c(1,2,3,4)],cl = train.data$Species, k=3)
test.labels <- knn(train = train.data[,c(1,2,3,4)], test = test.data[,c(1,2,3,4)],cl = train.data$Species, k=3)
print(table(test.data$Species, test.labels))
sum(test.data$species != test.labels)
sum(test.data$Species != test.labels)
sum(test.data$Species != test.labels)/ (nrow(test.data))
knn
clear
clc
cd Documents
ls
read.table("salary.dat", header=T)
setwd('~/Documents/data_science/homework/linreg_assignment/')
mae <- function(x,y)
{
return(mean(abs(x-y)))
}
alltrain <- read.csv("train.csv")
set.seed(5)
alltrain$fold <- sample(1:10, nrow(alltrain), replace=TRUE)
train <- subset(alltrain, fold != 1)
test <- subset(alltrain, fold == 1)
expression <- log(SalaryNormalized) ~ 1
model <- lm(expression, data = train)
summary(model)
error_from_fold <- function(n, expression){
model <- lm(expression, data=subset(alltrain, fold != n))
test <- subset(alltrain, fold == n)
error <- mae(exp(predict(model,test)),test$SalaryNormalized)
return(error)
}
mean(sapply(1:10, error_from_fold, expression))
location.tree <- read.csv('New_Location_Tree.csv', header=F, col.names = c("Country", "Region", "City","V4","V5","V6","V7"))
last.location.col <- read.csv('Last_Location_Col.csv',header=F)
last.location.col <- read.csv('Last_Location_Col.csv',header=F)
location.tree$V7 <- NULL
location.tree <- cbind(location.tree, last.location.col)
colnames(location.tree)[7] <- "LocationNormalized"
location.tree <- subset(location.tree, !duplicated(LocationNormalized))
location.tree[grep(" Channel Isles", location.tree$Region), "Region" ] <- " Channel Islands"
location.tree[grep(" E Midlands", location.tree$Region), "Region" ] <- " East Midlands"
location.tree[grep(" E Mids", location.tree$Region), "Region" ] <- " East Midlands"
location.tree[grep(" East Mids", location.tree$Region), "Region" ] <- " East Midlands"
location.tree[grep(" N E England", location.tree$Region), "Region" ] <- " North East England"
location.tree[grep(" NE England", location.tree$Region), "Region" ] <- " North East England"
location.tree[grep(" NW England", location.tree$Region), "Region" ] <- " North West England"
location.tree[grep(" SW England", location.tree$Region), "Region" ] <- " South West England"
location.tree[grep(" SE England", location.tree$Region), "Region" ] <- " South East England"
location.tree[grep(" W Midlands", location.tree$Region), "Region" ] <- " West Midlands"
location.tree[grep(" West Mids", location.tree$Region), "Region" ] <- " West Midlands"
location.tree[grep(" Yorkshire And The Humber", location.tree$Region), "Region" ] <- " Yorkshire and Humberside"
location.tree[grep(" Yorkshire", location.tree$Region), "Region" ] <- " Yorkshire and Humberside"
location.tree[grep(" Yorks", location.tree$Region), "Region" ] <- " Yorkshire and Humberside"
location.tree$Region <- factor(location.tree$Region)
# Merge:
alltrain <- merge(alltrain, location.tree)
train <- subset(alltrain, fold != 1)
test <- subset(alltrain, fold == 1)
expression = log(SalaryNormalized) ~ ContractType + ContractTime
model <- lm(expression, data = train)
summary(model)
# R-squared = 0.09741
mean(sapply(1:10, error_from_fold, expression))
# MAE across folds = 10586.31
# Adding in the Category and Region:
expression = log(SalaryNormalized) ~ ContractType + ContractTime + Category + Region
model <- lm(expression, data = train)
summary(model)
# R-squared = 0.2846
mean(sapply(1:10, error_from_fold, expression))
# MAE across folds = 9474.879
# Load in real test data, make final model using all training data, and make predictions
realtest <- read.csv("test.csv")
realtest <- merge(realtest, location.tree)
unknown_category_id <- which(!(realtest$Category %in% levels(alltrain$Category))) #
realtest$Category[unknown_category_id] <- as.factor("Other/General Jobs")
finalmodel <- lm(expression, data=alltrain)
predictions <- predict(finalmodel, realtest)
submission <- data.frame(Id=realtest$Id, Salary=exp(predictions))
write.csv(submission, "MargoSmith_submission.csv", row.names=FALSE)
is.na(submission)
sum(is.na(submission))
