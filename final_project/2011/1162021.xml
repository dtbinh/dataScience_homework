<?xml version="1.0" encoding="UTF-8"?>

<rootTag>
  <Award>
    <AwardTitle>SHF: Medium: RacePro: Automatically Detecting API Races in Deployed Systems</AwardTitle>
    <AwardEffectiveDate>09/01/2012</AwardEffectiveDate>
    <AwardExpirationDate>08/31/2016</AwardExpirationDate>
    <AwardAmount>800000</AwardAmount>
    <AwardInstrument>
      <Value>Standard Grant</Value>
    </AwardInstrument>
    <Organization>
      <Code>05010000</Code>
      <Directorate>
        <LongName>Directorate for Computer &amp; Information Science &amp; Engineering</LongName>
      </Directorate>
      <Division>
        <LongName>Division of Computer and Communication Foundations</LongName>
      </Division>
    </Organization>
    <ProgramOfficer>
      <SignBlockName>Nina Amla</SignBlockName>
    </ProgramOfficer>
    <AbstractNarration>While races in multithreaded programs have drawn huge attention from the&lt;br/&gt;research community, little has been done for API races, a class&lt;br/&gt;of errors as dangerous and as difficult to debug as traditional thread&lt;br/&gt;races. An API race occurs when multiple activities, whether they be&lt;br/&gt;threads or processes, access a shared resource via an application&lt;br/&gt;programming interface (API) without proper synchronization. Detecting&lt;br/&gt;API races is an important and difficult problem as existing race&lt;br/&gt;detectors are unlikely to work well with API races. &lt;br/&gt;&lt;br/&gt;Software reliability increasingly affects everyone, whether or not&lt;br/&gt;they personally use computers. This research studies and&lt;br/&gt;automatically detects for the first time an important class of races&lt;br/&gt;that has a significant impact on software reliability. The study&lt;br/&gt;quantitatively demonstrates how API races are numerous, difficult to&lt;br/&gt;debug, and a real threat to software reliability. To address this&lt;br/&gt;problem, this research is developing RacePro, a new system to&lt;br/&gt;automatically detect API races in deployed systems. RacePro checks&lt;br/&gt;deployed systems in-vivo by recording live executions then&lt;br/&gt;deterministically replay and check them later. This approach&lt;br/&gt;increases checking coverage beyond the configurations or executions&lt;br/&gt;covered by software vendors or beta testing sites. RacePro records&lt;br/&gt;multiple processes and threads, detects races in the recording among &lt;br/&gt;API methods that may concurrently access shared objects, then explores&lt;br/&gt;different execution orderings of such API methods to determine which races&lt;br/&gt;are harmful and result in failures. Technologies developed will help&lt;br/&gt;application developers detect insidious software defects, enabling &lt;br/&gt;more robust, reliable, and secure software infrastructure.</AbstractNarration>
    <MinAmdLetterDate>08/29/2012</MinAmdLetterDate>
    <MaxAmdLetterDate>08/29/2012</MaxAmdLetterDate>
    <ARRAAmount/>
    <AwardID>1162021</AwardID>
    <Investigator>
      <FirstName>Jason</FirstName>
      <LastName>Nieh</LastName>
      <EmailAddress>nieh@cs.columbia.edu</EmailAddress>
      <StartDate>08/29/2012</StartDate>
      <EndDate/>
      <RoleCode>1</RoleCode>
    </Investigator>
    <Investigator>
      <FirstName>Junfeng</FirstName>
      <LastName>Yang</LastName>
      <EmailAddress>junfeng@cs.columbia.edu</EmailAddress>
      <StartDate>08/29/2012</StartDate>
      <EndDate/>
      <RoleCode>2</RoleCode>
    </Investigator>
    <Institution>
      <Name>Columbia University</Name>
      <CityName>NEW YORK</CityName>
      <ZipCode>100276902</ZipCode>
      <PhoneNumber>2128546851</PhoneNumber>
      <StreetAddress>2960 Broadway</StreetAddress>
      <CountryName>United States</CountryName>
      <StateName>New York</StateName>
      <StateCode>NY</StateCode>
    </Institution>
    <ProgramElement>
      <Code>2878</Code>
      <Text>SPECIAL PROJECTS - CCF</Text>
    </ProgramElement>
  </Award>
</rootTag>
