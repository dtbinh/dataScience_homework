<?xml version="1.0" encoding="UTF-8"?>

<rootTag>
  <Award>
    <AwardTitle>CSR: Small: Fluid Communication for Parallel Programs</AwardTitle>
    <AwardEffectiveDate>08/01/2011</AwardEffectiveDate>
    <AwardExpirationDate>07/31/2013</AwardExpirationDate>
    <AwardAmount>214967</AwardAmount>
    <AwardInstrument>
      <Value>Standard Grant</Value>
    </AwardInstrument>
    <Organization>
      <Code>05050000</Code>
      <Directorate>
        <LongName>Directorate for Computer &amp; Information Science &amp; Engineering</LongName>
      </Directorate>
      <Division>
        <LongName>Division of Computer and Network Systems</LongName>
      </Division>
    </Organization>
    <ProgramOfficer>
      <SignBlockName>M. Mimi McClure</SignBlockName>
    </ProgramOfficer>
    <AbstractNarration>Every aspect of parallel software development is more complicated than for&lt;br/&gt;serial programs. This research focuses on one of the primary sources of&lt;br/&gt;complexity: intra-application communication. Currently it is a programmer's&lt;br/&gt;responsibility to find an efficient mapping of their application's&lt;br/&gt;communication patterns onto the communication infrastructure of the target&lt;br/&gt;system. This research flips that responsibility by developing a flexible&lt;br/&gt;communication architecture and associated tools and algorithms that allow the&lt;br/&gt;target platform to be specialized for a particular application, rather than&lt;br/&gt;vice versa. In addition to reducing the programmer's burden, specialization&lt;br/&gt;has the potential to improve communication efficiency while the automated&lt;br/&gt;techniques can increase portability. &lt;br/&gt;&lt;br/&gt;This research poses questions whose answers have consequences at several&lt;br/&gt;levels of the traditional system stack: Can programmers be freed from&lt;br/&gt;hardware-specific optimization of communication without degrading performance?&lt;br/&gt;What abstractions are needed to allow hardware to adapt to the programmer,&lt;br/&gt;rather than the other way around? Can communication efficiency be improved&lt;br/&gt;when running on an application-specific communication platform? The project&lt;br/&gt;answers these questions by exploring abstractions and algorithms to profile a&lt;br/&gt;parallel program's communication, synthesize a custom network design, and&lt;br/&gt;implement it in a configurable network architecture substrate. The research&lt;br/&gt;methods center around the X10 language, and include compiler instrumentation&lt;br/&gt;passes, offline communication profile analyses, development of a portable&lt;br/&gt;network intermediate representation, and network place and route software&lt;br/&gt;algorithms.</AbstractNarration>
    <MinAmdLetterDate>07/22/2011</MinAmdLetterDate>
    <MaxAmdLetterDate>04/18/2012</MaxAmdLetterDate>
    <ARRAAmount/>
    <AwardID>1117135</AwardID>
    <Investigator>
      <FirstName>Martha</FirstName>
      <LastName>Kim</LastName>
      <EmailAddress>martha@cs.columbia.edu</EmailAddress>
      <StartDate>07/22/2011</StartDate>
      <EndDate/>
      <RoleCode>1</RoleCode>
    </Investigator>
    <Institution>
      <Name>Columbia University</Name>
      <CityName>NEW YORK</CityName>
      <ZipCode>100276902</ZipCode>
      <PhoneNumber>2128546851</PhoneNumber>
      <StreetAddress>2960 Broadway</StreetAddress>
      <CountryName>United States</CountryName>
      <StateName>New York</StateName>
      <StateCode>NY</StateCode>
    </Institution>
    <ProgramElement>
      <Code>1714</Code>
      <Text>SPECIAL PROJECTS - CISE</Text>
    </ProgramElement>
    <ProgramElement>
      <Code>7354</Code>
      <Text>COMPUTER SYSTEMS</Text>
    </ProgramElement>
  </Award>
</rootTag>
