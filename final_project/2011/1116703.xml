<?xml version="1.0" encoding="UTF-8"?>

<rootTag>
  <Award>
    <AwardTitle>SHF: Small: Foundations and Applications of Higher-Dimensional Directed Type Theory</AwardTitle>
    <AwardEffectiveDate>08/01/2011</AwardEffectiveDate>
    <AwardExpirationDate>07/31/2014</AwardExpirationDate>
    <AwardAmount>534965</AwardAmount>
    <AwardInstrument>
      <Value>Standard Grant</Value>
    </AwardInstrument>
    <Organization>
      <Code>05010000</Code>
      <Directorate>
        <LongName>Directorate for Computer &amp; Information Science &amp; Engineering</LongName>
      </Directorate>
      <Division>
        <LongName>Division of Computer and Communication Foundations</LongName>
      </Division>
    </Organization>
    <ProgramOfficer>
      <SignBlockName>John Reppy</SignBlockName>
    </ProgramOfficer>
    <AbstractNarration>A central objective for computer science is to develop methods for building&lt;br/&gt;reliable and maintainable software. The most important technique for ensuring&lt;br/&gt;these properties is abstraction, the decomposition of a system into separable&lt;br/&gt;and reusable components. The theory of abstraction in programming is called&lt;br/&gt;type theory. A type is a specification of the behavior of a software component;&lt;br/&gt;type checking ensures that programs obey these specifications. This ensures&lt;br/&gt;that components can be modified or replaced without fear of disrupting the&lt;br/&gt;behavior of other components. By supporting the expression and enforcement of&lt;br/&gt;component behaviors, type theory integrates programming with verification, the&lt;br/&gt;process of ensuring compliance with specifications. All modern programming&lt;br/&gt;languages and development methodologies are based on, or draw inspiration from,&lt;br/&gt;type theory. The broad goal of this project is to extend the capabilities of&lt;br/&gt;type theory to a wider range of properties, and to use type theory to facilitate&lt;br/&gt;the development of reliable software.&lt;br/&gt;&lt;br/&gt;Specifically, the research will develop the theory of higher-dimensional type&lt;br/&gt;theory, and explore its application to generic programming, a technique&lt;br/&gt;for generating programs from their specifications. Higher-dimensional&lt;br/&gt;type theory draws on recent advances in category theory and algebraic&lt;br/&gt;topology that emphasize the algebraic structure of relations between&lt;br/&gt;programs, and relations between such relations, in direct analogy with&lt;br/&gt;the higher-dimensional structure of topological spaces. In this setting&lt;br/&gt;dependent families of types must respect the algebraic structure of such&lt;br/&gt;relations, and in doing so, they implicitly provide transformations that&lt;br/&gt;correspond to generic programs whose behavior is determined by their&lt;br/&gt;type. More broadly, the project will apply ideas from category theory&lt;br/&gt;and topology to improve software development, and apply ideas from type&lt;br/&gt;theory to facilitate computer-verified proofs of mathematical theorems.</AbstractNarration>
    <MinAmdLetterDate>07/18/2011</MinAmdLetterDate>
    <MaxAmdLetterDate>07/19/2012</MaxAmdLetterDate>
    <ARRAAmount/>
    <AwardID>1116703</AwardID>
    <Investigator>
      <FirstName>Robert</FirstName>
      <LastName>Harper</LastName>
      <EmailAddress>rwh@cs.cmu.edu</EmailAddress>
      <StartDate>07/18/2011</StartDate>
      <EndDate/>
      <RoleCode>1</RoleCode>
    </Investigator>
    <Institution>
      <Name>Carnegie-Mellon University</Name>
      <CityName>PITTSBURGH</CityName>
      <ZipCode>152133815</ZipCode>
      <PhoneNumber>4122689527</PhoneNumber>
      <StreetAddress>5000 Forbes Avenue</StreetAddress>
      <CountryName>United States</CountryName>
      <StateName>Pennsylvania</StateName>
      <StateCode>PA</StateCode>
    </Institution>
    <ProgramElement>
      <Code>7798</Code>
      <Text>SOFTWARE &amp; HARDWARE FOUNDATION</Text>
    </ProgramElement>
  </Award>
</rootTag>
