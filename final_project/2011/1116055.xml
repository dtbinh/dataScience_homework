<?xml version="1.0" encoding="UTF-8"?>

<rootTag>
  <Award>
    <AwardTitle>SHF: Small: Ordering-Based Semantics for Emerging Models of Parallel Computing</AwardTitle>
    <AwardEffectiveDate>08/01/2011</AwardEffectiveDate>
    <AwardExpirationDate>07/31/2014</AwardExpirationDate>
    <AwardAmount>497530</AwardAmount>
    <AwardInstrument>
      <Value>Standard Grant</Value>
    </AwardInstrument>
    <Organization>
      <Code>05010000</Code>
      <Directorate>
        <LongName>Directorate for Computer &amp; Information Science &amp; Engineering</LongName>
      </Directorate>
      <Division>
        <LongName>Division of Computer and Communication Foundations</LongName>
      </Division>
    </Organization>
    <ProgramOfficer>
      <SignBlockName>John Reppy</SignBlockName>
    </ProgramOfficer>
    <AbstractNarration>With the proliferation of multicore processors has come resurgence&lt;br/&gt;of interest in parallel programming languages and models,&lt;br/&gt;particularly those intended to make it easier for non-expert&lt;br/&gt;programmers to correctly implement important classes of parallel&lt;br/&gt;applications. Unfortunately, most such languages and models are &lt;br/&gt;informally -- and thus imprecisely -- defined. The aim of the &lt;br/&gt;sponsored research is to develop more formal definitions, which will&lt;br/&gt;be needed in order to truly understand and reason about programs,&lt;br/&gt;guide language implementations, and verify implementation&lt;br/&gt;correctness. Within computer science and allied fields, formal&lt;br/&gt;definitions will facilitate the transition to ubiquitous parallel&lt;br/&gt;computing. For society at large, this transition will be essential&lt;br/&gt;to maintain the momentum of the IT revolution, across government,&lt;br/&gt;industry, science, the arts, and entertainment.&lt;br/&gt;&lt;br/&gt;The technical core of the sponsored research is the use of&lt;br/&gt;history-based executions to capture both the behavior of individual&lt;br/&gt;threads of control and the interactions among those threads. In a&lt;br/&gt;departure from previous work, the interactions are always expressed&lt;br/&gt;in terms of atomic blocks, which can capture arbitrary&lt;br/&gt;language-level synchronization mechanisms. Specific topics being&lt;br/&gt;addressed include transactional memory (including the concepts of&lt;br/&gt;publication and privatization), explicit speculation, and &lt;br/&gt;determinism. The notion of determinism, in particular, is central&lt;br/&gt;to several emerging languages and models specifically intended for &lt;br/&gt;non-expert programmers. A formal framework for the definition of&lt;br/&gt;determinism will allow alternative definitions to be compared,&lt;br/&gt;contrasted, and correctly implemented.</AbstractNarration>
    <MinAmdLetterDate>07/19/2011</MinAmdLetterDate>
    <MaxAmdLetterDate>07/19/2011</MaxAmdLetterDate>
    <ARRAAmount/>
    <AwardID>1116055</AwardID>
    <Investigator>
      <FirstName>Michael</FirstName>
      <LastName>Scott</LastName>
      <EmailAddress>scott@cs.rochester.edu</EmailAddress>
      <StartDate>07/19/2011</StartDate>
      <EndDate/>
      <RoleCode>1</RoleCode>
    </Investigator>
    <Institution>
      <Name>University of Rochester</Name>
      <CityName>ROCHESTER</CityName>
      <ZipCode>146270140</ZipCode>
      <PhoneNumber>5852754031</PhoneNumber>
      <StreetAddress>518 HYLAN, RIVER CAMPUSBOX 27014</StreetAddress>
      <CountryName>United States</CountryName>
      <StateName>New York</StateName>
      <StateCode>NY</StateCode>
    </Institution>
    <ProgramElement>
      <Code>7798</Code>
      <Text>SOFTWARE &amp; HARDWARE FOUNDATION</Text>
    </ProgramElement>
  </Award>
</rootTag>
