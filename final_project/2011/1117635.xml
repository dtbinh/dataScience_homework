<?xml version="1.0" encoding="UTF-8"?>

<rootTag> 
  <Award> 
    <AwardTitle>SHF: Small: Effectful Software Contracts</AwardTitle>  
    <AwardEffectiveDate>08/01/2011</AwardEffectiveDate>  
    <AwardExpirationDate>11/30/2011</AwardExpirationDate>  
    <AwardAmount>440760</AwardAmount>  
    <AwardInstrument> 
      <Value>Standard Grant</Value> 
    </AwardInstrument>  
    <Organization> 
      <Code>05010000</Code>  
      <Directorate> 
        <LongName>Directorate for Computer &amp; Information Science &amp; Engineering</LongName> 
      </Directorate>  
      <Division> 
        <LongName>Division of Computer and Communication Foundations</LongName> 
      </Division> 
    </Organization>  
    <ProgramOfficer> 
      <SignBlockName>John Reppy</SignBlockName> 
    </ProgramOfficer>  
    <AbstractNarration>The long-term goals of this project are to bring the technology of&lt;br/&gt;software contracts to widely-used programming languages and, through&lt;br/&gt;the use of manifest contracts, to provide software developers with a&lt;br/&gt;migration path from simply typed code to fully functional correctness.&lt;br/&gt;Since computational effects are notoriously hard to reason about and&lt;br/&gt;pervade even the simplest realistic programs, the proposed research&lt;br/&gt;should have significant impact on programmers' ability to develop&lt;br/&gt;software that is more reliable and more secure. &lt;br/&gt;&lt;br/&gt;Contracts in software establish clear interfaces between program&lt;br/&gt;components. Like contracts in the legal realm, they delineate each&lt;br/&gt;party's expectations and obligations. Such contracts are becoming&lt;br/&gt;increasingly important for the regulation of modern software systems,&lt;br/&gt;providing an expressive framework for verification and error tracking.&lt;br/&gt;To be effective in a software environment, contracts must have formal&lt;br/&gt;semantics and must be supported by a monitoring system that precisely&lt;br/&gt;tracks the flow of values as they cross interfaces. To date, however,&lt;br/&gt;the formal study of contracts has mostly been limited to small&lt;br/&gt;idealized languages without computational effects, such as reading&lt;br/&gt;data from or writing data to a display or file, managing resources&lt;br/&gt;such as memory, and performing probabilistic or speculative&lt;br/&gt;computation.&lt;br/&gt;&lt;br/&gt;This research aims to extend the semantic framework of software&lt;br/&gt;contracts to languages with various computational effects: the&lt;br/&gt;extension is qualitative in nature and will enable the use of&lt;br/&gt;contracts in new application domains. Specifically, the PIs propose&lt;br/&gt;to add support for computational effects to the two flavors of&lt;br/&gt;contracts studied to date: latent contracts, which are runtime checks&lt;br/&gt;not reflected in the type system, and manifest contracts, where a&lt;br/&gt;system of precise types records the most recent runtime check applied&lt;br/&gt;to each value. The extension of latent contracts will be done in the&lt;br/&gt;context of a monadic met language. The extension of manifest&lt;br/&gt;contracts will make use of a variant of Hoare Type Theory to precisely&lt;br/&gt;record computational effects. The PIs will also implement prototype&lt;br/&gt;systems and use them to present novel applications of software&lt;br/&gt;contracts.</AbstractNarration>  
    <MinAmdLetterDate>07/20/2011</MinAmdLetterDate>  
    <MaxAmdLetterDate>07/20/2011</MaxAmdLetterDate>  
    <ARRAAmount/>  
    <AwardID>1117635</AwardID>  
    <Investigator> 
      <FirstName>Amr</FirstName>  
      <LastName>Sabry</LastName>  
      <EmailAddress>sabry@indiana.edu</EmailAddress>  
      <StartDate>07/20/2011</StartDate>  
      <EndDate/>  
      <RoleCode>2</RoleCode> 
    </Investigator>  
    <Investigator> 
      <FirstName>Amal</FirstName>  
      <LastName>Ahmed</LastName>  
      <EmailAddress>amal@ccs.neu.edu</EmailAddress>  
      <StartDate>07/20/2011</StartDate>  
      <EndDate/>  
      <RoleCode>1</RoleCode> 
    </Investigator>  
    <Institution> 
      <Name>Indiana University</Name>  
      <CityName>Bloomington</CityName>  
      <ZipCode>474013654</ZipCode>  
      <PhoneNumber>8128550516</PhoneNumber>  
      <StreetAddress>509 E 3RD ST</StreetAddress>  
      <CountryName>United States</CountryName>  
      <StateName>Indiana</StateName>  
      <StateCode>IN</StateCode> 
    </Institution>  
    <ProgramElement>
      <Code>7798</Code>
      <Text>SOFTWARE &amp; HARDWARE FOUNDATION</Text>
    </ProgramElement>
  </Award> 
</rootTag>
