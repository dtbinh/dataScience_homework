<?xml version="1.0" encoding="UTF-8"?>

<rootTag> 
  <Award> 
    <AwardTitle>SHF: Small: Synthesizing Human-Readable Documentation</AwardTitle>  
    <AwardEffectiveDate>09/01/2011</AwardEffectiveDate>  
    <AwardExpirationDate>08/31/2014</AwardExpirationDate>  
    <AwardAmount>470955</AwardAmount>  
    <AwardInstrument> 
      <Value>Standard Grant</Value> 
    </AwardInstrument>  
    <Organization> 
      <Code>05010000</Code>  
      <Directorate> 
        <LongName>Directorate for Computer &amp; Information Science &amp; Engineering</LongName> 
      </Directorate>  
      <Division> 
        <LongName>Division of Computing and Communication Foundations</LongName> 
      </Division> 
    </Organization>  
    <ProgramOfficer> 
      <SignBlockName>Sol J. Greenspan</SignBlockName> 
    </ProgramOfficer>  
    <AbstractNarration>Developing and maintaining software is a key challenge in computer science,&lt;br/&gt;with failures costing up to one half of one percent of the US GDP each&lt;br/&gt;year. Most code is retained and evolved, rather than created from scratch,&lt;br/&gt;and professional software developers spend over three-fourths of their time&lt;br/&gt;trying to understand existing code. Understandability and documentation&lt;br/&gt;have become key components of software quality, yet they remain poorly&lt;br/&gt;understood by both researchers and practitioners. In a future where the&lt;br/&gt;software engineering focus shifts from implementation to design and&lt;br/&gt;composition concerns, program understandability will become even more&lt;br/&gt;important. This research develops tools and techniques for mechanically&lt;br/&gt;generating documentation to help make programs easier to understand.&lt;br/&gt;&lt;br/&gt;The research follows the insight that modern analysis techniques can form&lt;br/&gt;rich descriptive models of programs that are both precise and succinct.&lt;br/&gt;Human-readable documentation can then be synthesized from such models.&lt;br/&gt;The approach applies to large programs across multiple application domains.&lt;br/&gt;The research focuses on documenting how code should be used correctly, a&lt;br/&gt;critical aspect in an era of components-of-the-shelf development, as well&lt;br/&gt;as documenting how code has changed and evolved over time, a key&lt;br/&gt;part of software maintenance. The research leverages program analysis&lt;br/&gt;techniques, machine learning, and textual synthesis, with results&lt;br/&gt;disseminated through academic publication; the education, training and&lt;br/&gt;mentoring of students; as well as freely-available, open-source tools.</AbstractNarration>  
    <MinAmdLetterDate>07/19/2011</MinAmdLetterDate>  
    <MaxAmdLetterDate>07/19/2011</MaxAmdLetterDate>  
    <ARRAAmount/>  
    <AwardID>1116289</AwardID>  
    <Investigator> 
      <FirstName>Westley</FirstName>  
      <LastName>Weimer</LastName>  
      <EmailAddress>wrw6y@virginia.edu</EmailAddress>  
      <StartDate>07/19/2011</StartDate>  
      <EndDate/>  
      <RoleCode>1</RoleCode> 
    </Investigator>  
    <Institution> 
      <Name>University of Virginia Main Campus</Name>  
      <CityName>CHARLOTTESVILLE</CityName>  
      <ZipCode>229044195</ZipCode>  
      <PhoneNumber>4349244270</PhoneNumber>  
      <StreetAddress>P.O. BOX 400195</StreetAddress>  
      <CountryName>United States</CountryName>  
      <StateName>Virginia</StateName>  
      <StateCode>VA</StateCode> 
    </Institution>  
    <ProgramElement>
      <Code>7798</Code>
      <Text>SOFTWARE &amp; HARDWARE FOUNDATION</Text>
    </ProgramElement>
  </Award> 
</rootTag>
