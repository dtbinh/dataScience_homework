<?xml version="1.0" encoding="UTF-8"?>

<rootTag> 
  <Award> 
    <AwardTitle>SHF: Small: Software and Hardware Integration with Feedback and Transparency for Many-Core Computing</AwardTitle>  
    <AwardEffectiveDate>09/01/2011</AwardEffectiveDate>  
    <AwardExpirationDate>08/31/2013</AwardExpirationDate>  
    <AwardAmount>139846</AwardAmount>  
    <AwardInstrument> 
      <Value>Standard Grant</Value> 
    </AwardInstrument>  
    <Organization> 
      <Code>05010000</Code>  
      <Directorate> 
        <LongName>Directorate for Computer &amp; Information Science &amp; Engineering</LongName> 
      </Directorate>  
      <Division> 
        <LongName>Division of Computer and Communication Foundations</LongName> 
      </Division> 
    </Organization>  
    <ProgramOfficer> 
      <SignBlockName>Almadena Y. Chtchelkanova</SignBlockName> 
    </ProgramOfficer>  
    <AbstractNarration>Multi-core processors are becoming prevalent and provide means for continuing to increase our computational capacity. These emerging platforms with multiple processing cores on chip offer the capability to run multiple programs simultaneously, thereby increasing the processing power of computing systems. However, since the running programs often share multi-core resources, execution interference effects between such programs can hurt their performance. Often times, software obliviousness to this underlying hardware behavior exacerbate the multi-core performance problem. Such adverse effects limit our computational progress in areas where interference can be detrimental such as high-performance computing and cloud computing, and could further complicate the predictability and deployment of these advanced processors in mission-critical domains such as avionics and automobiles. Therefore, understanding software behavior and Interference effects on multi-core processors is crucial to harnessing their full potential.&lt;br/&gt;&lt;br/&gt;In this research the investigators do preliminary studies of the issues arising from execution interference between multiple software threads on multi-core processor platforms. This research involves revisiting how hardware resource management can account for application-level constraints (such as performance isolation, fairness, and priority) by enhancing the interface between hardware and the Operating System (OS), and studying the hardware and software overheads. This research lays the groundwork for the hardware-OS interaction based on active fine-grained monitoring of resources and a two-way adaptation between both the hardware and OS to tightly control the effects of interference between threads.</AbstractNarration>  
    <MinAmdLetterDate>07/19/2011</MinAmdLetterDate>  
    <MaxAmdLetterDate>07/19/2011</MaxAmdLetterDate>  
    <ARRAAmount/>  
    <AwardID>1117243</AwardID>  
    <Investigator> 
      <FirstName>Gabriel</FirstName>  
      <LastName>Parmer</LastName>  
      <EmailAddress>gparmer@gwu.edu</EmailAddress>  
      <StartDate>07/19/2011</StartDate>  
      <EndDate/>  
      <RoleCode>2</RoleCode> 
    </Investigator>  
    <Investigator> 
      <FirstName>Guru Prasadh</FirstName>  
      <LastName>Venkataramani</LastName>  
      <EmailAddress>guruv@gwu.edu</EmailAddress>  
      <StartDate>07/19/2011</StartDate>  
      <EndDate/>  
      <RoleCode>1</RoleCode> 
    </Investigator>  
    <Institution> 
      <Name>George Washington University</Name>  
      <CityName>Washington</CityName>  
      <ZipCode>200522000</ZipCode>  
      <PhoneNumber>2029946255</PhoneNumber>  
      <StreetAddress>2121 Eye Street NW</StreetAddress>  
      <CountryName>United States</CountryName>  
      <StateName>District of Columbia</StateName>  
      <StateCode>DC</StateCode> 
    </Institution>  
    <ProgramElement>
      <Code>7798</Code>
      <Text>SOFTWARE &amp; HARDWARE FOUNDATION</Text>
    </ProgramElement>
  </Award> 
</rootTag>
