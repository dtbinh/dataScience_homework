<?xml version="1.0" encoding="UTF-8"?>

<rootTag>
  <Award>
    <AwardTitle>CSR: Small: Collaborative Research: Improving Dependability of Multithreaded Distributed Programs</AwardTitle>
    <AwardEffectiveDate>09/01/2011</AwardEffectiveDate>
    <AwardExpirationDate>08/31/2014</AwardExpirationDate>
    <AwardAmount>225709</AwardAmount>
    <AwardInstrument>
      <Value>Standard Grant</Value>
    </AwardInstrument>
    <Organization>
      <Code>05050000</Code>
      <Directorate>
        <LongName>Directorate for Computer &amp; Information Science &amp; Engineering</LongName>
      </Directorate>
      <Division>
        <LongName>Division of Computer and Network Systems</LongName>
      </Division>
    </Organization>
    <ProgramOfficer>
      <SignBlockName>Krishna Kant</SignBlockName>
    </ProgramOfficer>
    <AbstractNarration>Nearly all modern processors now contain multiple cores and almost all modern computer systems contain multiple processors. Thus future software is likely to be both multithreaded (in which threads of a process communicate using shared memory) and distributed (in which processes in a system communicate using messages). Ensuring that a program works correctly under all possible scenarios is a very dif&amp;#64257;cult task. Most real-world programs contain a large number of components which makes their formal veri&amp;#64257;cation infeasible. Effective tools for testing and debugging programs prior to their deployment are indispensable. Bugs persist even after extensive testing and debugging especially those that manifest under rare circumstances. Monitoring programs at runtime and possibly controlling their execution to avoid bad states is an important way to tolerate residual software bugs. &lt;br/&gt;In this project, we are working on developing a theory and algorithms for monitoring, analyzing and controlling a multithreaded distributed computation. Specifically, we are developing (i) a unifying framework for modeling synchronization in multicore distributed systems resulting from messages, locks and other synchronization primitives (e.g., wait/notify), (ii) offline and online algorithms for detecting and controlling predicates, expressed as temporal logic formulas, using slicing and other approaches, and (iii) scalable approaches for tracking dependency among events.&lt;br/&gt;Besides multicore computing, the work has applications in a variety of other areas including cloud computing, distributed databases, recovery, replica consistency and resource management. We are also developing educational tools that can be used in courses to enhance the learning experience of students working with multicore distributed systems.</AbstractNarration>
    <MinAmdLetterDate>08/06/2011</MinAmdLetterDate>
    <MaxAmdLetterDate>08/06/2011</MaxAmdLetterDate>
    <ARRAAmount/>
    <AwardID>1115808</AwardID>
    <Investigator>
      <FirstName>Vijay</FirstName>
      <LastName>Garg</LastName>
      <EmailAddress>garg@ece.utexas.edu</EmailAddress>
      <StartDate>08/06/2011</StartDate>
      <EndDate/>
      <RoleCode>1</RoleCode>
    </Investigator>
    <Institution>
      <Name>University of Texas at Austin</Name>
      <CityName>Austin</CityName>
      <ZipCode>787121532</ZipCode>
      <PhoneNumber>5124716424</PhoneNumber>
      <StreetAddress>101 E. 27th Street, Suite 5.300</StreetAddress>
      <CountryName>United States</CountryName>
      <StateName>Texas</StateName>
      <StateCode>TX</StateCode>
    </Institution>
    <ProgramElement>
      <Code>7354</Code>
      <Text>COMPUTER SYSTEMS</Text>
    </ProgramElement>
  </Award>
</rootTag>
