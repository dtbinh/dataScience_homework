<?xml version="1.0" encoding="UTF-8"?>

<rootTag> 
  <Award> 
    <AwardTitle>SHF: Small: Tool Support for Verifiably-Robust Software</AwardTitle>  
    <AwardEffectiveDate>10/01/2012</AwardEffectiveDate>  
    <AwardExpirationDate>09/30/2015</AwardExpirationDate>  
    <AwardAmount>499922</AwardAmount>  
    <AwardInstrument> 
      <Value>Standard Grant</Value> 
    </AwardInstrument>  
    <Organization> 
      <Code>05010000</Code>  
      <Directorate> 
        <LongName>Directorate for Computer &amp; Information Science &amp; Engineering</LongName> 
      </Directorate>  
      <Division> 
        <LongName>Division of Computing and Communication Foundations</LongName> 
      </Division> 
    </Organization>  
    <ProgramOfficer> 
      <SignBlockName>Nina Amla</SignBlockName> 
    </ProgramOfficer>  
    <AbstractNarration>Society increasingly relies on software in critical roles for which crashes can have serious consequences including the loss of lives. For example, it is now commonplace for software to control the engines and brakes in our cars. This research investigates a new approach for improving the resilience of software. The goal is to verify that hidden bugs cannot cause programs to transition into problematic states in which they stop responding to human control or respond differently than when they were tested. Given the scale that our society depends on software in critical roles, new approaches to improving software resilience have the potential to reduce the financial costs of software failures and even save lives.&lt;br/&gt;&lt;br/&gt;Previous work on software resilience largely focused on extensive testing or formal verification of correctness. This project takes a new approach - it seeks to verify that the consequences of a software error have a limited scope in time. Precisely, it verifies that after a bounded time period after an error, the execution will reach a state in which it will respond with same behaviors seen while testing. This property is known in the distributed systems literature as self-stabilization. The project will combine type annotations with compiler analyses to verify that a computation is self-stabilizing. A second thrust of the project is to explore how to compose self-stabilizing computations with stateful computations while still providing useful system level guarantees.</AbstractNarration>  
    <MinAmdLetterDate>07/03/2012</MinAmdLetterDate>  
    <MaxAmdLetterDate>07/03/2012</MaxAmdLetterDate>  
    <ARRAAmount/>  
    <AwardID>1217854</AwardID>  
    <Investigator> 
      <FirstName>Brian</FirstName>  
      <LastName>Demsky</LastName>  
      <EmailAddress>bdemsky@uci.edu</EmailAddress>  
      <StartDate>07/03/2012</StartDate>  
      <EndDate/>  
      <RoleCode>1</RoleCode> 
    </Investigator>  
    <Institution> 
      <Name>University of California-Irvine</Name>  
      <CityName>IRVINE</CityName>  
      <ZipCode>926977600</ZipCode>  
      <PhoneNumber>9498244768</PhoneNumber>  
      <StreetAddress>5171 California Avenue, Ste 150</StreetAddress>  
      <CountryName>United States</CountryName>  
      <StateName>California</StateName>  
      <StateCode>CA</StateCode> 
    </Institution>  
    <ProgramElement>
      <Code>7798</Code>
      <Text>SOFTWARE &amp; HARDWARE FOUNDATION</Text>
    </ProgramElement>
  </Award> 
</rootTag>
