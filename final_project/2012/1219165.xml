<?xml version="1.0" encoding="UTF-8"?>

<rootTag>
  <Award>
    <AwardTitle>SHF Small: Language Support for Variation Maintenance</AwardTitle>
    <AwardEffectiveDate>09/01/2012</AwardEffectiveDate>
    <AwardExpirationDate>08/31/2015</AwardExpirationDate>
    <AwardAmount>497728</AwardAmount>
    <AwardInstrument>
      <Value>Standard Grant</Value>
    </AwardInstrument>
    <Organization>
      <Code>05010000</Code>
      <Directorate>
        <LongName>Directorate for Computer &amp; Information Science &amp; Engineering</LongName>
      </Directorate>
      <Division>
        <LongName>Division of Computer and Communication Foundations</LongName>
      </Division>
    </Organization>
    <ProgramOfficer>
      <SignBlockName>Sol J. Greenspan</SignBlockName>
    </ProgramOfficer>
    <AbstractNarration>Managing variation is an important part of software engineering. Many existing software projects can already generate a huge number of distinct programs that run on different platforms and provide different feature sets. Research on software product lines and feature-oriented software development has provided processes and tools for the development of massively configurable software, suggesting that the variability of software systems will only continue to grow. A currently largely unsolved problem is how to systematically transform variation representations to support the creation, refactoring, and migration of variation, as wall as the analysis and querying of variation-rich software repositories. The objective of this research is to investigate the systematic transformation of variation structures and develop language support for it. &lt;br/&gt;&lt;br/&gt;The following technical approach is pursued. First, gathering variation programming tasks will provide a basis for the understanding of the nature and extent of variation transformations, and assembling a catalog of such tasks will aid the design, evaluation, and comparison of variation languages. Second, the definition of the syntax and semantics of a transformational choice calculus, which extends the (representational) choice calculus with computational features, will support the investigation of formal properties of variation programming. Third, the development of a variation type system facilitates the characterization of different kinds of changes and evolutions of variational structures. Moreover, the development of a variation module system will provide an interface between low-level details required by the intricate scoping and binding issues of the choice calculus representation and a more high-level, declarative view of variations. Finally, the design of a domain-specific embedded language for variation programming will allow the easy description of transformations of variation structures in software artifacts. It also supports the experimentation with variation transformations. Since the scope of this research extends beyond professional software and covers also end-user programming systems, such as spreadsheets, the developed methods will be applicable in a wide variety of contexts and can thus empower millions of users to handle variation in a more systematic way.</AbstractNarration>
    <MinAmdLetterDate>08/29/2012</MinAmdLetterDate>
    <MaxAmdLetterDate>08/29/2012</MaxAmdLetterDate>
    <ARRAAmount/>
    <AwardID>1219165</AwardID>
    <Investigator>
      <FirstName>Martin</FirstName>
      <LastName>Erwig</LastName>
      <EmailAddress>erwig@eecs.oregonstate.edu</EmailAddress>
      <StartDate>08/29/2012</StartDate>
      <EndDate/>
      <RoleCode>1</RoleCode>
    </Investigator>
    <Institution>
      <Name>Oregon State University</Name>
      <CityName>Corvallis</CityName>
      <ZipCode>973318507</ZipCode>
      <PhoneNumber>5417374933</PhoneNumber>
      <StreetAddress>OREGON STATE UNIVERSITY</StreetAddress>
      <CountryName>United States</CountryName>
      <StateName>Oregon</StateName>
      <StateCode>OR</StateCode>
    </Institution>
    <ProgramElement>
      <Code>7798</Code>
      <Text>SOFTWARE &amp; HARDWARE FOUNDATION</Text>
    </ProgramElement>
  </Award>
</rootTag>
