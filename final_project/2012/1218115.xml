<?xml version="1.0" encoding="UTF-8"?>

<rootTag> 
  <Award> 
    <AwardTitle>SHF: Small: From Scenario-Based Software Requirements to Component-Level Behavior</AwardTitle>  
    <AwardEffectiveDate>09/01/2012</AwardEffectiveDate>  
    <AwardExpirationDate>08/31/2015</AwardExpirationDate>  
    <AwardAmount>499961</AwardAmount>  
    <AwardInstrument> 
      <Value>Standard Grant</Value> 
    </AwardInstrument>  
    <Organization> 
      <Code>05010000</Code>  
      <Directorate> 
        <LongName>Directorate for Computer &amp; Information Science &amp; Engineering</LongName> 
      </Directorate>  
      <Division> 
        <LongName>Division of Computing and Communication Foundations</LongName> 
      </Division> 
    </Organization>  
    <ProgramOfficer> 
      <SignBlockName>Sol J. Greenspan</SignBlockName> 
    </ProgramOfficer>  
    <AbstractNarration>Use-case scenario-based specifications are frequently used to capture the most important requirements for a software system. Several techniques have been proposed for representing the scenario models and for mapping them to software system behavior models. The resulting behavior models yield several important benefits, including the ability to perform early system assessment and to aid the software engineers in implementing the required functionality. The two key observations guiding this research are that (1) use-case scenarios are inherently partial and (2) modern software systems are typically built by composing independent components. Existing techniques support either modeling the partial behavior of an entire system, or modeling component-level behaviors under the assumption that they are known completely.&lt;br/&gt;&lt;br/&gt;To bridge the above disconnect, this research provides a trio of formally correct techniques for mapping use-case scenario models of a system's requirements to partial-behavior models of the constituent system components. The resulting behavior models are then used to validate existing and elicit new requirements, which in turn, result in further refinements of the components models. The resulting techniques are evaluated theoretically for correctness, completeness, and complexity, and empirically for practical usefulness and scalability. The research yields several broader impacts: it improves the current state of software requirements specification and formalizes its relationship to the prevalent component-based software system development; its reliance on popular scenario-based modeling notations renders the resulting techniques easy to adopt in practice; the support for eliciting currently unspecified requirements leads to improved understandings of systems under development; finally, the supported early discovery and resolution of system behavior discrepancies helps to mitigate significant costs that would be incurred if detected at later stages of a system's lifecycle.</AbstractNarration>  
    <MinAmdLetterDate>08/01/2012</MinAmdLetterDate>  
    <MaxAmdLetterDate>08/01/2012</MaxAmdLetterDate>  
    <ARRAAmount/>  
    <AwardID>1218115</AwardID>  
    <Investigator> 
      <FirstName>Nenad</FirstName>  
      <LastName>Medvidovic</LastName>  
      <EmailAddress>neno@usc.edu</EmailAddress>  
      <StartDate>08/01/2012</StartDate>  
      <EndDate/>  
      <RoleCode>1</RoleCode> 
    </Investigator>  
    <Institution> 
      <Name>University of Southern California</Name>  
      <CityName>Los Angeles</CityName>  
      <ZipCode>900890701</ZipCode>  
      <PhoneNumber>2137407762</PhoneNumber>  
      <StreetAddress>University Park</StreetAddress>  
      <CountryName>United States</CountryName>  
      <StateName>California</StateName>  
      <StateCode>CA</StateCode> 
    </Institution>  
    <ProgramElement>
      <Code>7798</Code>
      <Text>SOFTWARE &amp; HARDWARE FOUNDATION</Text>
    </ProgramElement>
  </Award> 
</rootTag>
