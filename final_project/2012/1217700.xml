<?xml version="1.0" encoding="UTF-8"?>

<rootTag>
  <Award>
    <AwardTitle>SHF: Small: Expressive and Scalable Notifications for Program Analysis Tools</AwardTitle>
    <AwardEffectiveDate>10/01/2012</AwardEffectiveDate>
    <AwardExpirationDate>09/30/2014</AwardExpirationDate>
    <AwardAmount>250000</AwardAmount>
    <AwardInstrument>
      <Value>Standard Grant</Value>
    </AwardInstrument>
    <Organization>
      <Code>05010000</Code>
      <Directorate>
        <LongName>Directorate for Computer &amp; Information Science &amp; Engineering</LongName>
      </Directorate>
      <Division>
        <LongName>Division of Computer and Communication Foundations</LongName>
      </Division>
    </Organization>
    <ProgramOfficer>
      <SignBlockName>Sol J. Greenspan</SignBlockName>
    </ProgramOfficer>
    <AbstractNarration>Software developers create the software that society increasingly relies on, and in turn software developers rely on program analysis tools to help them create that software. A wide variety of program analysis tools have been created to help software developers do their jobs, yet the output of these tools are often difficult to understand and vary significantly from tool to tool. As a result, software developers may waste time trying to interpret the output of these tools, instead of making their software more capable and reliable.&lt;br/&gt;&lt;br/&gt;The goals of this project are (1) to understand how expressiveness and scalability can be increased in and across program analysis tools and (2) to understand how increased expressiveness and scalability affects developers' effectiveness and efficiency in creating and maintaining software. To reach these goals, the project will study three different types of program analysis tools, investigate the similarities and differences between these tools, describe how expressiveness and uniformity can be increased, and finally evaluate tools created with enhanced expressiveness and uniformity in mind. There are three outcomes of this project: (1) design guidelines to help tool makers create better program analysis tools, (2) tool implementations that illustrate how the guidelines can be fulfilled, and (3) empirical results that demonstrate the extent to which and the context in which program analysis tools implemented with the guidelines yield positive outcomes. Once these goals are reached, we can create program analysis tools that enable developers to make tremendous strides towards more correct, more reliable, and more on-time software systems.</AbstractNarration>
    <MinAmdLetterDate>09/06/2012</MinAmdLetterDate>
    <MaxAmdLetterDate>09/06/2012</MaxAmdLetterDate>
    <ARRAAmount/>
    <AwardID>1217700</AwardID>
    <Investigator>
      <FirstName>Emerson</FirstName>
      <LastName>Murphy-Hill</LastName>
      <EmailAddress>emerson@csc.ncsu.edu</EmailAddress>
      <StartDate>09/06/2012</StartDate>
      <EndDate/>
      <RoleCode>1</RoleCode>
    </Investigator>
    <Investigator>
      <FirstName>Sarah</FirstName>
      <LastName>Heckman</LastName>
      <EmailAddress>Sarah_Heckman@ncsu.edu</EmailAddress>
      <StartDate>09/06/2012</StartDate>
      <EndDate/>
      <RoleCode>2</RoleCode>
    </Investigator>
    <Institution>
      <Name>North Carolina State University</Name>
      <CityName>RALEIGH</CityName>
      <ZipCode>276957514</ZipCode>
      <PhoneNumber>9195152444</PhoneNumber>
      <StreetAddress>CAMPUS BOX 7514</StreetAddress>
      <CountryName>United States</CountryName>
      <StateName>North Carolina</StateName>
      <StateCode>NC</StateCode>
    </Institution>
    <ProgramElement>
      <Code>7798</Code>
      <Text>SOFTWARE &amp; HARDWARE FOUNDATION</Text>
    </ProgramElement>
  </Award>
</rootTag>
