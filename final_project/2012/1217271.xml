<?xml version="1.0" encoding="UTF-8"?>

<rootTag>
  <Award>
    <AwardTitle>SHF: Small: A Practical Program Transformation Infrastructure for C in the Presence of Multiple Configurations</AwardTitle>
    <AwardEffectiveDate>09/01/2012</AwardEffectiveDate>
    <AwardExpirationDate>08/31/2014</AwardExpirationDate>
    <AwardAmount>410046</AwardAmount>
    <AwardInstrument>
      <Value>Standard Grant</Value>
    </AwardInstrument>
    <Organization>
      <Code>05010000</Code>
      <Directorate>
        <LongName>Directorate for Computer &amp; Information Science &amp; Engineering</LongName>
      </Directorate>
      <Division>
        <LongName>Division of Computer and Communication Foundations</LongName>
      </Division>
    </Organization>
    <ProgramOfficer>
      <SignBlockName>Sol J. Greenspan</SignBlockName>
    </ProgramOfficer>
    <AbstractNarration>Over the last decade, the field of Software Engineering has seen a rapid and widespread adoption of automated refactoring tools: tools that analyze the source code under the direction of the programmer, and make systematic changes to that program that improve its internal structure without affecting its behavior. In the C programming language, which is one of the most popular languages in use, there is only a limited portfolio of refactorings available, with limited scalability and limited applicability to real-world programs. This research will address the technical problems that make it difficult to build automated refactoring tools (and other program transformation tools) for C: the ability to "configure" C programs using preprocessor macros, the need to perform sophisticated analyses in the presence of many such configurations, and the need to analyze and transform C when it is mixed with other programming languages. Solving these problems, and producing a tool that incorporates these solutions, will provide much needed tool improvements for C programmers.&lt;br/&gt;&lt;br/&gt;The research will culminate in a prototype refactoring and program transformation tool for C that addresses the aforementioned problems. Handling multiple preprocessor configurations will involve the exploration of both a parsing algorithm and a program representation: the parsing algorithm extends the LALR(1) algorithm to handle preprocessor directives, while the program representation accommodates multiple configurations in a single abstract syntax tree (AST). Semantic information (from various static analyses) will be superimposed on the AST; however, this will require extending the static analyses to handle the complications presented by multiple preprocessor configurations. The tool will also allow for transforming mixed-language C programs--in particular, C programs mixed with Fortran or Yacc (two languages that are commonly combined with C). Handling multiple languages may be treated as an extension of the multiple configurations problem, where declarations in one language and definitions in a different language are treated, at least conceptually, as different configurations. The tool will be available under an open source license.</AbstractNarration>
    <MinAmdLetterDate>08/31/2012</MinAmdLetterDate>
    <MaxAmdLetterDate>04/30/2013</MaxAmdLetterDate>
    <ARRAAmount/>
    <AwardID>1217271</AwardID>
    <Investigator>
      <FirstName>Munawar</FirstName>
      <LastName>Hafiz</LastName>
      <EmailAddress>munawar@auburn.edu</EmailAddress>
      <StartDate>08/31/2012</StartDate>
      <EndDate/>
      <RoleCode>1</RoleCode>
    </Investigator>
    <Institution>
      <Name>Auburn University</Name>
      <CityName>Auburn</CityName>
      <ZipCode>368495131</ZipCode>
      <PhoneNumber>3348444438</PhoneNumber>
      <StreetAddress>310 Samford Hall</StreetAddress>
      <CountryName>United States</CountryName>
      <StateName>Alabama</StateName>
      <StateCode>AL</StateCode>
    </Institution>
    <ProgramElement>
      <Code>7798</Code>
      <Text>SOFTWARE &amp; HARDWARE FOUNDATION</Text>
    </ProgramElement>
    <ProgramElement>
      <Code>7944</Code>
      <Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
    </ProgramElement>
  </Award>
</rootTag>
