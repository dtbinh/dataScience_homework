<?xml version="1.0" encoding="UTF-8"?>

<rootTag>
  <Award>
    <AwardTitle>EAGER: Collaborative Research: Compiler and Architecture Support for Avoiding Writes to Memory-Preliminary Study</AwardTitle>
    <AwardEffectiveDate>05/15/2012</AwardEffectiveDate>
    <AwardExpirationDate>04/30/2014</AwardExpirationDate>
    <AwardAmount>74861</AwardAmount>
    <AwardInstrument>
      <Value>Standard Grant</Value>
    </AwardInstrument>
    <Organization>
      <Code>05010000</Code>
      <Directorate>
        <LongName>Directorate for Computer &amp; Information Science &amp; Engineering</LongName>
      </Directorate>
      <Division>
        <LongName>Division of Computer and Communication Foundations</LongName>
      </Division>
    </Organization>
    <ProgramOfficer>
      <SignBlockName>Almadena Y. Chtchelkanova</SignBlockName>
    </ProgramOfficer>
    <AbstractNarration>The cost of writing data from a computer's processor to its storage components remains a bottleneck for modern computing systems. The speed of the processor continues to improve, more processing units are packed into a computer chip, but these advances only cause more data to be written to storage per second. The speed of storage subsystems has not kept pace with the processor?s ability to produce data for storage, and this difference in performance is likely to continue. Moreover, the trend in building storage subsystems for computers is to utilize technologies such as flash memories whose contents can be changed a relatively small number of times before the memory wears out. These technologies are cheaper and pack more storage into a given area, but care must be taken to avoid writing to memories made from such technologies at rates usually seen from a processor to memory. &lt;br/&gt;&lt;br/&gt;This EAGER project aims to discover mechanisms that reduce or eliminate traffic from a processor to the storage subsystem. Elimination of such traffic increases the speed of the overall system and saves wear on storage components. This research finds data that would otherwise be sent to storage from the processor and eliminates such writes to memory. This technique is based on finding that such data cannot subsequently be referenced by an application. This effort focuses on a preliminary study to validate the technical approach, namely investigating the consequences of eliminating stores of data that has been explicitly deallocated by an application.</AbstractNarration>
    <MinAmdLetterDate>05/09/2012</MinAmdLetterDate>
    <MaxAmdLetterDate>05/09/2012</MaxAmdLetterDate>
    <ARRAAmount/>
    <AwardID>1237417</AwardID>
    <Investigator>
      <FirstName>Krishna</FirstName>
      <LastName>Kavi</LastName>
      <EmailAddress>kavi@cse.unt.edu</EmailAddress>
      <StartDate>05/09/2012</StartDate>
      <EndDate/>
      <RoleCode>1</RoleCode>
    </Investigator>
    <Institution>
      <Name>University of North Texas</Name>
      <CityName>DENTON</CityName>
      <ZipCode>762035017</ZipCode>
      <PhoneNumber>9405653940</PhoneNumber>
      <StreetAddress>1155 Union Circle #305250</StreetAddress>
      <CountryName>United States</CountryName>
      <StateName>Texas</StateName>
      <StateCode>TX</StateCode>
    </Institution>
    <ProgramElement>
      <Code>7798</Code>
      <Text>SOFTWARE &amp; HARDWARE FOUNDATION</Text>
    </ProgramElement>
  </Award>
</rootTag>
