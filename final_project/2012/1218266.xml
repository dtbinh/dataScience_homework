<?xml version="1.0" encoding="UTF-8"?>

<rootTag>
  <Award>
    <AwardTitle>SHF: Small: Collaborative Research: Tracing and Reasoning about Changing Artifacts</AwardTitle>
    <AwardEffectiveDate>09/01/2012</AwardEffectiveDate>
    <AwardExpirationDate>08/31/2015</AwardExpirationDate>
    <AwardAmount>504980</AwardAmount>
    <AwardInstrument>
      <Value>Standard Grant</Value>
    </AwardInstrument>
    <Organization>
      <Code>05010000</Code>
      <Directorate>
        <LongName>Directorate for Computer &amp; Information Science &amp; Engineering</LongName>
      </Directorate>
      <Division>
        <LongName>Division of Computer and Communication Foundations</LongName>
      </Division>
    </Organization>
    <ProgramOfficer>
      <SignBlockName>Sol J. Greenspan</SignBlockName>
    </ProgramOfficer>
    <AbstractNarration>Change pervades the entire software development process. Software may be changed in response to market forces, changing customer requirements, or new hardware and software dependencies. The thread of changes, along with the decisions behind those changes, is often transient and is rarely directly captured by a development team. Source code drifts away from requirement and design documents (and other artifacts) that explain the motivations and decisions behind the code. There is a high overhead in maintaining consistency between these artifacts and the code. Project schedules have tight deadlines, with little or no time to explicitly document the decisions behind code changes. Thus, further code modifications are often expensive because the software engineers lack the understanding of past decisions.&lt;br/&gt;&lt;br/&gt;This project aims to investigate a lightweight, flexible, and systematic approach to identifying and connecting related changes to support future maintenance activities. By leveraging traceability and refactoring techniques, we can represent change as a first-class artifact so that software engineers can better understand the nature of change and how it impacts related artifacts. Our approach is novel because it allows developers to reason about changes as varied as high-level concepts to low-level code that cuts across several modules. We also investigate techniques for bridging any gaps between these connections.&lt;br/&gt;&lt;br/&gt;The approach is applicable to organizations that maintain legacy systems or acquire software from other organizations. The results will also be valuable to any medium- or large-scale development context in assimilating new personnel and in coordinating distributed development.</AbstractNarration>
    <MinAmdLetterDate>08/29/2012</MinAmdLetterDate>
    <MaxAmdLetterDate>06/05/2013</MaxAmdLetterDate>
    <ARRAAmount/>
    <AwardID>1218266</AwardID>
    <Investigator>
      <FirstName>Hazeline</FirstName>
      <LastName>Asuncion</LastName>
      <EmailAddress>hazeline@u.washington.edu</EmailAddress>
      <StartDate>08/29/2012</StartDate>
      <EndDate/>
      <RoleCode>1</RoleCode>
    </Investigator>
    <Institution>
      <Name>University of Washington</Name>
      <CityName>SEATTLE</CityName>
      <ZipCode>981959472</ZipCode>
      <PhoneNumber>2065434043</PhoneNumber>
      <StreetAddress>4333 Brooklyn Ave NE</StreetAddress>
      <CountryName>United States</CountryName>
      <StateName>Washington</StateName>
      <StateCode>WA</StateCode>
    </Institution>
    <ProgramElement>
      <Code>7798</Code>
      <Text>SOFTWARE &amp; HARDWARE FOUNDATION</Text>
    </ProgramElement>
    <ProgramElement>
      <Code>7944</Code>
      <Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
    </ProgramElement>
  </Award>
</rootTag>
