<?xml version="1.0" encoding="UTF-8"?>

<rootTag> 
  <Award> 
    <AwardTitle>SHF: Small: Generalizing Monotonic Data Structures for Expressive, Deterministic Parallel Programming</AwardTitle>  
    <AwardEffectiveDate>08/01/2012</AwardEffectiveDate>  
    <AwardExpirationDate>07/31/2015</AwardExpirationDate>  
    <AwardAmount>377315</AwardAmount>  
    <AwardInstrument> 
      <Value>Standard Grant</Value> 
    </AwardInstrument>  
    <Organization> 
      <Code>05010000</Code>  
      <Directorate> 
        <LongName>Directorate for Computer &amp; Information Science &amp; Engineering</LongName> 
      </Directorate>  
      <Division> 
        <LongName>Division of Computing and Communication Foundations</LongName> 
      </Division> 
    </Organization>  
    <ProgramOfficer> 
      <SignBlockName>John Reppy</SignBlockName> 
    </ProgramOfficer>  
    <AbstractNarration>The current trend in computer hardware is towards increasing numbers of parallel, independent processing units (cores). This trend necessitates a widespread transition from traditional sequential programming to parallel programming. But because parallel programming is notoriously difficult, adoption has been slow. A fundamental reason for this difficulty is that programs can often yield inconsistent answers, or even crash, due to unpredictable interactions between parallel tasks. Certain classes of programs, however, admit strong mathematical guarantees that they will behave the same in spite of parallel execution. This research is extending the mathematical foundation underlying such deterministic programs. It studies a family of programming languages that allow both parallel computations, and communications between them in the form of restricted modifications to, and observations of, shared data. The communication allowed is of a more general nature than previous work in the area.&lt;br/&gt;&lt;br/&gt;This project is centered around a variant of the lambda-calculus that includes shared variables whose states occupy a join semilattice and change monotonically within that lattice. A number of deterministic programming models, both recent (Intel CnC), and older (Kahn-MacQueen Process Networks), can be mapped into this framework. In addition to constructing proofs of determinism for the language, this project explores various extensions, including limited forms of nondeterminism (i.e., which admit failures but never wrong answers). Finally this project will use its formal language as a tool for reasoning about practical parallel programs. That is, determinism can be demonstrated by verifying that the program's shared states form a semilattice and state changes are monotonic.</AbstractNarration>  
    <MinAmdLetterDate>07/23/2012</MinAmdLetterDate>  
    <MaxAmdLetterDate>07/23/2012</MaxAmdLetterDate>  
    <ARRAAmount/>  
    <AwardID>1218375</AwardID>  
    <Investigator> 
      <FirstName>Ryan</FirstName>  
      <LastName>Newton</LastName>  
      <EmailAddress>rrnewton@indiana.edu</EmailAddress>  
      <StartDate>07/23/2012</StartDate>  
      <EndDate/>  
      <RoleCode>1</RoleCode> 
    </Investigator>  
    <Institution> 
      <Name>Indiana University</Name>  
      <CityName>Bloomington</CityName>  
      <ZipCode>474013654</ZipCode>  
      <PhoneNumber>8128550516</PhoneNumber>  
      <StreetAddress>509 E 3RD ST</StreetAddress>  
      <CountryName>United States</CountryName>  
      <StateName>Indiana</StateName>  
      <StateCode>IN</StateCode> 
    </Institution>  
    <ProgramElement>
      <Code>7798</Code>
      <Text>SOFTWARE &amp; HARDWARE FOUNDATION</Text>
    </ProgramElement>
  </Award> 
</rootTag>
