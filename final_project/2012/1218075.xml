<?xml version="1.0" encoding="UTF-8"?>

<rootTag>
  <Award>
    <AwardTitle>SHF: Small: Ensuring Reliability and Portability of Scientific Software for Heterogeneous Architectures</AwardTitle>
    <AwardEffectiveDate>08/01/2012</AwardEffectiveDate>
    <AwardExpirationDate>07/31/2015</AwardExpirationDate>
    <AwardAmount>507857</AwardAmount>
    <AwardInstrument>
      <Value>Standard Grant</Value>
    </AwardInstrument>
    <Organization>
      <Code>05010000</Code>
      <Directorate>
        <LongName>Directorate for Computer &amp; Information Science &amp; Engineering</LongName>
      </Directorate>
      <Division>
        <LongName>Division of Computer and Communication Foundations</LongName>
      </Division>
    </Organization>
    <ProgramOfficer>
      <SignBlockName>Nina Amla</SignBlockName>
    </ProgramOfficer>
    <AbstractNarration>Numerical results of scientific computations are stored in computers as&lt;br/&gt;floating-point numbers, an approximation of real numbers that accounts for&lt;br/&gt;the fact that a computer's storage is limited. This need for approximation&lt;br/&gt;has the unfortunate side effect that floating-point numbers don't abide by&lt;br/&gt;common laws of arithmetic known from high school, such as the associativity&lt;br/&gt;of addition. As a consequence, apparently equivalent implementations of&lt;br/&gt;floating-point operations on computer hardware may produce very different&lt;br/&gt;results, such as when the order of operands of an addition is changed by a&lt;br/&gt;compiler. Programs generically written for high-performance parallel computing&lt;br/&gt;platforms are likely to be compiled using different floating-point&lt;br/&gt;implementations and schedulings, as the executable resulting from the&lt;br/&gt;compilation depends on the available hardware. Such parallel scientific&lt;br/&gt;programs are therefore susceptible to reliability and portability issues&lt;br/&gt;that can range from simple deviations in precision to drastic changes of&lt;br/&gt;program control flow when moving from one architecture to another.&lt;br/&gt;The results of this research will be tools and techniques to help scientists &lt;br/&gt;find bugs more effectively in such programs. This research has important implications &lt;br/&gt;for the reliability of important scientific programs such as those used in biomedical &lt;br/&gt;imaging applications, climate modelling, and vehicle design. &lt;br/&gt;&lt;br/&gt;This project develops rigorous methods for analyzing parallel scientific&lt;br/&gt;code, specifically written using the now emerging OpenCL parallel&lt;br/&gt;programming standard. The goal is to detect potential sources of&lt;br/&gt;reliability and portability deficiencies in such code that are due to&lt;br/&gt;dependencies of the floating-point behavior on the underlying hardware,&lt;br/&gt;which may be unknown to the programmer. Traditional reliability methods&lt;br/&gt;such as program testing and debugging are ineffective for parallel OpenCL&lt;br/&gt;programs, because program behavior may vary across runs, making after-test&lt;br/&gt;behavior uncertain. For these reasons, the investigators will use rigorous&lt;br/&gt;analysis methods that are not solely based on program execution. Instead,&lt;br/&gt;the program is formally modeled as a transition system; the model is&lt;br/&gt;encoded symbolically, using logical formula representations that can often&lt;br/&gt;compactly represent the set of executions of the program without executing&lt;br/&gt;it. The program model is then analyzed for portability violations and&lt;br/&gt;program errors using floating point-capable decision procedures and model&lt;br/&gt;checkers. To achieve scalability, the investigators plan to exploit the&lt;br/&gt;highly symmetric and parametric form of OpenCL programs, where identical&lt;br/&gt;operations are performed by many computational threads in Single&lt;br/&gt;Instruction Multiple Data (SIMD) style.</AbstractNarration>
    <MinAmdLetterDate>07/03/2012</MinAmdLetterDate>
    <MaxAmdLetterDate>04/15/2013</MaxAmdLetterDate>
    <ARRAAmount/>
    <AwardID>1218075</AwardID>
    <Investigator>
      <FirstName>Miriam</FirstName>
      <LastName>Leeser</LastName>
      <EmailAddress>mel@ece.neu.edu</EmailAddress>
      <StartDate>07/03/2012</StartDate>
      <EndDate/>
      <RoleCode>2</RoleCode>
    </Investigator>
    <Investigator>
      <FirstName>Thomas</FirstName>
      <LastName>Wahl</LastName>
      <EmailAddress>wahl@ccs.neu.edu</EmailAddress>
      <StartDate>07/03/2012</StartDate>
      <EndDate/>
      <RoleCode>1</RoleCode>
    </Investigator>
    <Institution>
      <Name>Northeastern University</Name>
      <CityName>BOSTON</CityName>
      <ZipCode>021155005</ZipCode>
      <PhoneNumber>6173735600</PhoneNumber>
      <StreetAddress>360 HUNTINGTON AVE</StreetAddress>
      <CountryName>United States</CountryName>
      <StateName>Massachusetts</StateName>
      <StateCode>MA</StateCode>
    </Institution>
    <ProgramElement>
      <Code>7798</Code>
      <Text>SOFTWARE &amp; HARDWARE FOUNDATION</Text>
    </ProgramElement>
    <ProgramElement>
      <Code>7944</Code>
      <Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
    </ProgramElement>
  </Award>
</rootTag>
